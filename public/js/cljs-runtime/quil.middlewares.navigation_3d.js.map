{"version":3,"sources":["quil/middlewares/navigation_3d.cljc"],"mappings":"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","names":["quil.middlewares.navigation-3d/missing-navigation-key-error","quil.middlewares.navigation-3d/assert-state-has-navigation","state","js/Error","quil.middlewares.navigation-3d/default-position","quil.core/width","quil.core/height","quil.core/tan","quil.core/PI","quil.middlewares.navigation-3d/rotate-by-axis-and-angle","v","axis","angle","vec__35873","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__35876","a-x","a-y","a-z","x","y","z","cs","quil.core/cos","-cs","sn","quil.core/sin","a","b","c","d","e","f","g","h","i","quil.middlewares.navigation-3d/rotate-lr","nav-3d","cljs.core.update_in.cljs$core$IFn$_invoke$arity$5","p__35881","p__35882","vec__35883","vec__35886","quil.middlewares.navigation-3d/cross-product","u1","u2","u3","v1","v2","v3","quil.middlewares.navigation-3d/v-mult","mult","p1__35889#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","quil.middlewares.navigation-3d/v-plus","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","cljs.core/+","quil.middlewares.navigation-3d/v-opposite","quil.middlewares.navigation-3d/v-normalize","norm","cljs.core.map.cljs$core$IFn$_invoke$arity$2","quil.core/sq","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","quil.core/sqrt","quil.middlewares.navigation-3d/rotate-ud","p1__35890#","rotate","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","quil.middlewares.navigation-3d/rotate","event","pixels-in-360","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic","dx","dy","angle-lr","quil.core/map-range","quil.core/TWO-PI","angle-ud","p1__35891#","quil.middlewares.navigation-3d/space","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","quil.middlewares.navigation-3d/move","step-size","map__35893","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","up","straight","temp__5718__auto__","dir","pred__35895","expr__35896","G__35898","G__35899","G__35900","G__35901","G__35902","G__35903","G__35904","G__35905","G__35906","G__35907","cljs.core/=","p1__35892#","quil.middlewares.navigation-3d/setup-3d-nav","user-setup","user-settings","initial-state","cljs.core/select-keys","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__35908#","quil.middlewares.navigation-3d/navigation-3d","options","rotate-on","draw","key-pressed","_","rotate-on-fn","G__35913","G__35914","setup","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","map__35915","vec__35916","vec__35919","vec__35922","c-x","c-y","c-z","u-x","u-y","u-z","p-x","p-y","p-z","quil.core.camera.cljs$core$IFn$_invoke$arity$9","G__35930","G__35931","G__35932","G__35933"],"sourcesContent":["(ns quil.middlewares.navigation-3d\n  (:require [quil.core :as q]))\n\n(def ^:private ^String missing-navigation-key-error\n  (str \"state map is missing :navigation-3d key. \"\n       \"Did you accidentally removed it from the state in \"\n       \":update or any other handler?\"))\n\n(defn- assert-state-has-navigation\n  \"Asserts that state map contains :navigation-2d object.\"\n  [state]\n  (when-not (:navigation-3d state)\n    (throw #?(:clj (RuntimeException. missing-navigation-key-error)\n              :cljs (js/Error. missing-navigation-key-error)))))\n\n(defn- default-position\n  \"Default position configuration. Check default configuration in\n  'camera' function.\"\n  []\n  {:position [(/ (q/width) 2.0)\n              (/ (q/height) 2.0)\n              (/ (q/height) 2.0 (q/tan (/ (* q/PI 60.0) 360.0)))]\n   :straight [0 0 -1]\n   :up [0 1 0]})\n\n(defn- rotate-by-axis-and-angle\n  \"Rotates vector v by angle with axis.\n  Formula is taken from wiki:\n  http://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\"\n  [v axis angle]\n  (let [[a-x a-y a-z] axis\n        [x y z] v\n        cs (q/cos angle)\n        -cs (- 1 cs)\n        sn (q/sin angle)\n        ; Matrix is\n        ; [a b c]\n        ; [d e f]\n        ; [g h i]\n        a (+ cs (* a-x a-x -cs))\n        b (- (* a-x a-y -cs)\n             (* a-z sn))\n        c (+ (* a-x a-z -cs)\n             (* a-y sn))\n        d (+ (* a-x a-y -cs)\n             (* a-z sn))\n        e (+ cs (* a-y a-y -cs))\n        f (- (* a-y a-z -cs)\n             (* a-x sn))\n        g (- (* a-x a-z -cs)\n             (* a-y sn))\n        h (+ (* a-y a-z -cs)\n             (* a-x sn))\n        i (+ cs (* a-z a-z -cs))]\n    [(+ (* a x) (* b y) (* c z))\n     (+ (* d x) (* e y) (* f z))\n     (+ (* g x) (* h y) (* i z))]))\n\n(defn- rotate-lr\n  \"Rotates nav-3d configuration left-right. angle positive - rotate right,\n  negative - left.\"\n  [nav-3d angle]\n  (update-in nav-3d [:straight] rotate-by-axis-and-angle (:up nav-3d) angle))\n\n(defn- cross-product\n  \"Vector cross-product: http://en.wikipedia.org/wiki/Cross_product\"\n  [[u1 u2 u3] [v1 v2 v3]]\n  [(- (* u2 v3) (* u3 v2))\n   (- (* u3 v1) (* u1 v3))\n   (- (* u1 v2) (* u2 v1))])\n\n(defn- v-mult\n  \"Multiply vector v by scalar mult.\"\n  [v mult]\n  (mapv #(* % mult) v))\n\n(defn- v-plus\n  \"Sum of 2 vectors.\"\n  [v1 v2]\n  (mapv + v1 v2))\n\n(defn- v-opposite\n  \"Returns vector opposite to vector v.\"\n  [v]\n  (v-mult v -1))\n\n(defn- v-normalize\n  \"Normalize vector, returning vector\n  which has same direction but with norm equals to 1.\"\n  [v]\n  (let [norm (->> (map q/sq v)\n                  (apply +)\n                  (q/sqrt))]\n    (v-mult v (/ norm))))\n\n(defn- rotate-ud\n  \"Rotates nav-3d configuration up-down.\"\n  [nav-3d angle]\n  (let [axis (cross-product (:straight nav-3d) (:up nav-3d))\n        rotate #(rotate-by-axis-and-angle % axis angle)]\n    (-> nav-3d\n        (update-in [:straight] rotate)\n        (update-in [:up] rotate))))\n\n(defn- rotate\n  \"Mouse handler function which rotates nav-3d configuration.\n  It uses mouse from event object and pixels-in-360 to calculate\n  angles to rotate.\"\n  [state event pixels-in-360]\n  (assert-state-has-navigation state)\n  (if (= 0 (:p-x event) (:p-y event))\n    state\n    (let [dx (- (:p-x event) (:x event))\n          dy (- (:y event) (:p-y event))\n          angle-lr (q/map-range dx 0 pixels-in-360 0 q/TWO-PI)\n          angle-ud (q/map-range dy 0 pixels-in-360 0 q/TWO-PI)]\n      (update-in state [:navigation-3d]\n                 #(-> %\n                      (rotate-lr angle-lr)\n                      (rotate-ud angle-ud))))))\n\n(def ^:private space (keyword \" \"))\n\n(defn- move\n  \"Keyboard handler function which moves nav-3d configuration.\n  It uses keyboard key from event object to determing in which\n  direction to move.\"\n  [state event step-size]\n  (assert-state-has-navigation state)\n  (let [{:keys [up straight]} (:navigation-3d state)]\n    (if-let [dir (condp = (:key event)\n                   :w straight\n                   :s (v-opposite straight)\n                   space (v-opposite up)\n                   :z up\n                   :d (cross-product straight up)\n                   :a (cross-product up straight)\n                   nil)]\n      (update-in state [:navigation-3d :position]\n                 #(v-plus % (v-mult dir step-size)))\n      state)))\n\n(defn- setup-3d-nav\n  \"Custom 'setup' function which creates initial position\n  configuration and puts it to the state map.\"\n  [user-setup user-settings]\n  (let [initial-state (-> user-settings\n                          (select-keys [:straight :up :position])\n                          (->> (merge (default-position)))\n                          (update-in [:straight] v-normalize)\n                          (update-in [:up] v-normalize))]\n    (update-in (user-setup) [:navigation-3d]\n               #(merge initial-state %))))\n\n(defn navigation-3d\n  \"Enables navigation in 3D space. Similar to how it is done in\n  shooters: WASD navigation, space is go up, z is go down,\n  drag mouse to look around.\"\n  [options]\n  (let [; 3d-navigation related user settings\n        user-settings (:navigation-3d options)\n        pixels-in-360 (:pixels-in-360 user-settings 1000)\n        step-size (:step-size user-settings 20)\n        rotate-on (:rotate-on user-settings :mouse-dragged)\n\n        ; user-provided handlers which will be overridden\n        ; by 3d-navigation\n        draw (:draw options (fn [state]))\n        key-pressed (:key-pressed options (fn [state _] state))\n        rotate-on-fn (rotate-on options (fn [state _] state))\n        setup (:setup options (fn [] {}))]\n    (assoc options\n\n           :setup (partial setup-3d-nav setup user-settings)\n\n           :draw (fn [state]\n                   (assert-state-has-navigation state)\n                   (let [{[c-x c-y c-z] :straight\n                          [u-x u-y u-z] :up\n                          [p-x p-y p-z] :position} (:navigation-3d state)]\n                     (q/camera p-x p-y p-z (+ p-x c-x) (+ p-y c-y) (+ p-z c-z) u-x u-y u-z))\n                   (draw state))\n\n           :key-pressed (fn [state event]\n                          (key-pressed (move state event step-size) event))\n\n           rotate-on (fn [state event]\n                       (rotate-on-fn (rotate state event pixels-in-360) event)))))\n"]}