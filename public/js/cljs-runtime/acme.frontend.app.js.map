{"version":3,"sources":["acme/frontend/app.cljs"],"mappings":";;;;AAIA,AAAA,AAAMA;AAAN,AACE,AAAA,AAACC;;AAEH,AAAA,AAAMC,AAAOC;AAAb,AACC,AAACH;;AAIF,AAAA,AAAMI;AAAN,AACE,AAAA,AAACC;;AACD,AAAA,AAACC;;AAFH,AAAA,AAAA,AAAA,AAAA;;AAMA,AAAA,AAAMC,AAAcC;AAApB,AACE,AAAAC,AAA4BD;AAA5BC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAoBM;AAApB,AAAA,AAAA,AAAA,AACU,AAAA,AAACC,AAAI,AAAA,AAAGF,AACR,AAACE,AAAI,AAAA,AAAGD,AAAWE;;AAE/B,AAAA,AAAMC,AAAYV;AAAlB,AACE,AAAA,AAACW;;AACD,AAAA,AAAA,AAACC,AAAO,AAAA,AAAQZ;;AAChB,AAAMO,AAAM,AAAA,AAAQP;AACda,AAAE,AAAA,AAAO,AAACC,AAAMP;AAChBQ,AAAE,AAAA,AAAO,AAACC,AAAMT;AAFtB,AAGE,AAAAU,AAAA,AAAqB,AAAA,AAAG,AAACI,AACJ,AAAA,AAAG,AAACC;AADzB,AAAA,AAAAJ;;AAAA,AAAA,AAAA,AAAAC,AAAAF;;AAEE,AAAA,AAAA,AAACM,AAAUV,AAAEE;AAFf,AAAA,AAAAK;;AAIJ,AAAA,AAAA,AAAaW;AAAb,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAIU1B;AAJV2B;AAAA,AAAA,AAAAvB,AAAAuB,AAIU3B;;;AAJV2B;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAGS7B,AACCG;AAJV2B;AAAA,AAAA,AAAAvB,AAAAuB,AAGS9B;;;AAHT8B;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAGS7B,AAEDc,AACOsB;AANfN;AAAA,AAAA,AAAAvB,AAAAuB,AAKQhB;;;AALRgB;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAKQhB;;;;AALR,AAAA,AAAAiB,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD;AAAA;AAAA;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAaC","names":["acme.frontend.app/init","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","acme.frontend.app/reload","done","acme.frontend.app/setup","quil.core/frame-rate","quil.core.color_mode.cljs$core$IFn$_invoke$arity$1","acme.frontend.app/update-state","state","map__25930","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","color","angle","cljs.core/mod","quil.core/TWO-PI","acme.frontend.app/draw-state","quil.core.background.cljs$core$IFn$_invoke$arity$1","quil.core.fill.cljs$core$IFn$_invoke$arity$3","x","quil.core/cos","y","quil.core/sin","tr__25701__auto__","quil.core/push-matrix","quil.core.translate.cljs$core$IFn$_invoke$arity$1","quil.core/pop-matrix","quil.core/width","quil.core/height","quil.core/ellipse","quil.sketch.sketch.cljs$core$IFn$_invoke$arity$variadic","cljs.core/fn?","args","cljs.core/some","p1__25299__25300__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quil.sketch/add-sketch-to-init-list","acme.frontend.app/example","quil.middleware/fun-mode"],"sourcesContent":["(ns acme.frontend.app\n\t(:require [quil.core :as q :include-macros true]\n\t\t\t\t\t\t\t\t\t\t [quil.middleware :as m]))\n\n(defn init []\n  (println \"Hello World. Time for coffee!!!!\"))\n\n(defn reload[done]\n\t(init)\n\t; (done)\n\t)\n\n(defn setup []\n  (q/frame-rate 30)\n  (q/color-mode :hsb)\n  {:color 0\n   :angle 0})\n\n(defn update-state [state]\n  (let [{:keys [color angle]} state]\n    {:color (mod (+ color 0.7) 255)\n     :angle (mod (+ angle 0.1) q/TWO-PI)}))\n\n(defn draw-state [state]\n  (q/background 240)\n  (q/fill (:color state) 255 255)\n  (let [angle (:angle state)\n        x (* 150 (q/cos angle))\n        y (* 150 (q/sin angle))]\n    (q/with-translation [(/ (q/width) 2)\n                         (/ (q/height) 2)]\n      (q/ellipse x y 100 100))))\n\n(q/defsketch example\n  ; :host \"host\"\n  :size [500 500]\n  :setup setup\n  :update update-state\n  :draw draw-state\n  :middleware [m/fun-mode])\n"]}