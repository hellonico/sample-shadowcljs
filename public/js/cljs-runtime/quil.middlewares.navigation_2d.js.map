{"version":3,"sources":["quil/middlewares/navigation_2d.cljc"],"mappings":";;;AAGA,AAAuBA,AACrB,AAAA,AAAA,AAAA;AAIF;;;AAAA,AAAOC,AAEJC;AAFH,AAGE,AAAU,AAAA,AAAgBA;AAA1B;;AAAA,AACE,AACgB,AAAAC,AAAWH;;;AAE/B;;;;AAAA,AAAOI;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAIc,AAAA,AAAG,AAACC,AACJ,AAAA,AAAG,AAACC;;AAGlB;;;;AAAA,AAAOC,AAGJC,AAAWC;AAHd,AAIE,AAAMC,AAAkBD,AACA,AAAA,AAAA,AAAA,AAACE,AACI,AAACC,AAAM,AAACR;AAFrC,AAGE,AAAA,AAAA,AAAA,AAACU,AAAU,AAACN,AAAAA,AAAAA;AAAZK;AAAA,AACY,AAAAA,AAACD,AAAMF;;;;AAEvB;;;;AAAA,AAAOK,AAGJb,AAAMc;AAHT,AAIE,AAACf,AAA4BC;;AAC7B,AAAMe,AAAG,AAAG,AAAA,AAAMD,AAAO,AAAA,AAAIA;AACvBE,AAAG,AAAG,AAAA,AAAMF,AAAO,AAAA,AAAIA;AACvBG,AAAK,AAAA,AAAA,AAAA,AAAIjB;AAFf,AAGMA,AACA,AAAA,AAAA,AAAA,AAAA,AAACkB,AAAuCC,AAAE,AAAGJ,AAAGE,AAChD,AAAA,AAAA,AAAA,AAAA,AAACC,AAAuCC,AAAE,AAAGH,AAAGC;;AAExD;;;AAAA,AAAOG,AAEJpB,AAAMc;AAFT,AAGE,AAACf,AAA4BC;;AAC7B,AAAA,AAAA,AAAA,AAACkB,AAAUlB,AAA6BqB,AAAE,AAAA,AAAK,AAAA,AAAQP;;AAEzD;;;;AAAA,AAAOQ,AAGJC,AAAUvB;AAHb,AAIE,AAACD,AAA4BC;;AAC7B,AAACwB;;AACD,AAAMC,AAAO,AAAA,AAAgBzB;AACvBiB,AAAK,AAAA,AAAOQ;AACZC,AAAI,AAAA,AAAWD;AAFrB,AAGE,AAACE,AAAQV;;AACT,AAAAW,AAAA,AAAqB,AAAG,AAAA,AAAA,AAAG,AAACzB,AAAWc,AAAM,AAACc,AAAML,AAC/B,AAAG,AAAA,AAAA,AAAG,AAACtB,AAAYa,AAAM,AAACe,AAAON;AADtD,AAAA,AAAAF;;AAAA,AAAA,AAAA,AAAAK,AAAAD;;AAEE,AAACL,AAAAA,AAAAA,AAAUvB,AAAAA;AAFb,AAAA,AAAA8B;;AAGF,AAACA;;AAEH;;;;AAAA,AAAMG,AAGHC;AAHH,AAIE,AACM3B,AAAc,AAAA,AAAgB2B;AAI9BX,AAAU,AAAA,AAAOW,AAAQ;AAAKlC;AAAL,AAAA;;;AACzBmC,AAAmB,AAAA,AAAgBD,AAAQ;AAAKlC,AAAMoC;AAAX,AAAcpC;;;AACzDqC,AAAiB,AAAA,AAAcH,AAAQ;AAAKlC,AAAMoC;AAAX,AAAcpC;;;AACrDsC,AAAM,AAAA,AAAQJ,AAAQ;;AAAA,AAAA;;;AAR5B,AASE,AAAA,AAAA,AAAA,AAACK,AAAML,AAEO,AAACM,AAAQnC,AAAaiC,AAAM/B,AAE7B,AAACkC,AAAQnB,AAAKC,AAEL;AAAKvB,AAAMc;AAAX,AACE,AAAA4B,AAAoB,AAAC7B,AAAcb,AAAMc;AAAzC6B,AAAgD7B;AAAhD,AAAA,AAAA4B,AAAAC,AAAAD,AAAAC,AAACR,AAAAA,AAAAA;;AAPzB,AAQoB;AAAKnC,AAAMc;AAAX,AACE,AAAA8B,AAAkB,AAACxB,AAAYpB,AAAMc;AAArC+B,AAA4C/B;AAA5C,AAAA,AAAA8B,AAAAC,AAAAD,AAAAC,AAACR,AAAAA,AAAAA","names":["quil.middlewares.navigation-2d/missing-navigation-key-error","quil.middlewares.navigation-2d/assert-state-has-navigation","state","js/Error","quil.middlewares.navigation-2d/default-position","quil.core/width","quil.core/height","quil.middlewares.navigation-2d/setup-2d-nav","user-setup","user-settings","initial-state","cljs.core/select-keys","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__36488#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","quil.middlewares.navigation-2d/mouse-dragged","event","dx","dy","zoom","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/+","quil.middlewares.navigation-2d/mouse-wheel","cljs.core/*","quil.middlewares.navigation-2d/draw","user-draw","quil.core/push-matrix","nav-2d","pos","quil.core.scale.cljs$core$IFn$_invoke$arity$1","tr__36393__auto__","quil.core.translate.cljs$core$IFn$_invoke$arity$1","quil.core/pop-matrix","cljs.core/first","cljs.core/second","quil.middlewares.navigation-2d/navigation-2d","options","user-mouse-dragged","_","user-mouse-wheel","setup","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","G__36493","G__36494","G__36495","G__36496"],"sourcesContent":["(ns quil.middlewares.navigation-2d\n  (:require [quil.core :as q :include-macros true]))\n\n(def ^:private ^String missing-navigation-key-error\n  (str \"state map is missing :navigation-2d key. \"\n       \"Did you accidentally removed it from the state in \"\n       \":update or any other handler?\"))\n\n(defn- assert-state-has-navigation\n  \"Asserts that state map contains :navigation-2d object.\"\n  [state]\n  (when-not (:navigation-2d state)\n    (throw #?(:clj (RuntimeException. missing-navigation-key-error)\n              :cljs (js/Error. missing-navigation-key-error)))))\n\n(defn- default-position\n  \"Default position configuration: zoom is neutral and central point is\n  width/2, height/2.\"\n  []\n  {:position [(/ (q/width) 2.0)\n              (/ (q/height) 2.0)]\n   :zoom 1})\n\n(defn- setup-2d-nav\n  \"Custom 'setup' function which creates initial position\n  configuration and puts it to the state map.\"\n  [user-setup user-settings]\n  (let [initial-state (-> user-settings\n                          (select-keys [:position :zoom])\n                          (->> (merge (default-position))))]\n    (update-in (user-setup) [:navigation-2d]\n               #(merge initial-state %))))\n\n(defn- mouse-dragged\n  \"Changes center of the sketch depending on the last mouse move. Takes\n  zoom into account as well.\"\n  [state event]\n  (assert-state-has-navigation state)\n  (let [dx (- (:p-x event) (:x event))\n        dy (- (:p-y event) (:y event))\n        zoom (-> state :navigation-2d :zoom)]\n    (-> state\n        (update-in [:navigation-2d :position 0] + (/ dx zoom))\n        (update-in [:navigation-2d :position 1] + (/ dy zoom)))))\n\n(defn- mouse-wheel\n  \"Changes zoom settings based on scroll.\"\n  [state event]\n  (assert-state-has-navigation state)\n  (update-in state [:navigation-2d :zoom] * (+ 1 (* -0.1 event))))\n\n(defn- draw\n  \"Calls user draw function with necessary all transformations (position\n  and zoom) applied.\"\n  [user-draw state]\n  (assert-state-has-navigation state)\n  (q/push-matrix)\n  (let [nav-2d (:navigation-2d state)\n        zoom (:zoom nav-2d)\n        pos (:position nav-2d)]\n    (q/scale zoom)\n    (q/with-translation [(- (/ (q/width) 2 zoom) (first pos))\n                         (- (/ (q/height) 2 zoom) (second pos))]\n      (user-draw state)))\n  (q/pop-matrix))\n\n(defn navigation-2d\n  \"Enables navigation over 2D sketch. Dragging mouse will move center of the\n  skecth and mouse wheel controls zoom.\"\n  [options]\n  (let [; 2d-navigation related user settings\n        user-settings (:navigation-2d options)\n\n        ; user-provided handlers which will be overridden\n        ; by 3d-navigation\n        user-draw (:draw options (fn [state]))\n        user-mouse-dragged (:mouse-dragged options (fn [state _] state))\n        user-mouse-wheel (:mouse-wheel options (fn [state _] state))\n        setup (:setup options (fn [] {}))]\n    (assoc options\n\n           :setup (partial setup-2d-nav setup user-settings)\n\n           :draw (partial draw user-draw)\n\n           :mouse-dragged (fn [state event]\n                            (user-mouse-dragged (mouse-dragged state event) event))\n           :mouse-wheel (fn [state event]\n                          (user-mouse-wheel (mouse-wheel state event) event)))))\n"]}