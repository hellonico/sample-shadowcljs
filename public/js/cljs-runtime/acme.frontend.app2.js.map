{"version":3,"sources":["acme/frontend/app2.cljs"],"mappings":";;;;AAIA,AAAA,AAAMA;AAAN,AACE,AAAA,AAACC;;AAEH,AAAA,AAAMC,AAAOC;AAAb,AACC,AAACH;;AAIF,AAAA,AAAMI;AAAN,AACE,AAAA,AAACC;;AACD,AAAA,AAACC;;AAEH,AAAA,AAAMC;AAAN,AACE,AAACC,AAAS,AAAA,AAACC;;AACX,AAACC,AAAgB,AAAA,AAACD;;AAClB,AAACE,AAAO,AAAA,AAACF;;AAET,AAAMG,AAAK,AAAA,AAACH;AACNI,AAAK,AAACJ,AAAS,AAACK;AAChBC,AAAK,AAACN,AAAS,AAACO;AAFtB,AAGE,AAACC,AAAUJ,AAAEE,AAAEH,AAAKA;;AAExB,AAAA,AAAA,AAAac;AAAb,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA;AAAA,AAEa,AAAA,AAACS;AAFd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAA,AAGSf;AAHTgB;AAAA,AAAA,AAAAC,AAAAD,AAGShB;;;AAHTgB;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAAA,AAAA,AAAA,AAAAD,AAAA,AAGSf,AACDG;AAJRa;AAAA,AAAA,AAAAC,AAAAD,AAIQb;;;AAJRa;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAIQb;;;;AAJR,AAAA,AAAAe,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD;AAAA;AAAA;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAaC","names":["acme.frontend.app2/init","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","acme.frontend.app2/reload","done","acme.frontend.app2/setup","quil.core/frame-rate","quil.core.background.cljs$core$IFn$_invoke$arity$1","acme.frontend.app2/draw","quil.core.stroke.cljs$core$IFn$_invoke$arity$1","quil.core.random.cljs$core$IFn$_invoke$arity$1","quil.core/stroke-weight","quil.core.fill.cljs$core$IFn$_invoke$arity$1","diam","x","quil.core/width","y","quil.core/height","quil.core/ellipse","quil.sketch.sketch.cljs$core$IFn$_invoke$arity$variadic","cljs.core/fn?","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/some","p1__35500__35501__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quil.sketch/add-sketch-to-init-list","acme.frontend.app2/app2","quil.core.smooth.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns acme.frontend.app2\n\t(:require [quil.core :as q :include-macros true]\n\t\t\t\t\t\t\t\t\t\t [quil.middleware :as m]))\n\n(defn init []\n  (println \"Hello World. Time for coffee!!!!\"))\n\n(defn reload[done]\n\t(init)\n\t; (done)\n\t)\n\n(defn setup []\n  (q/frame-rate 1)                    ;; Set framerate to 1 FPS\n  (q/background 200))                 ;; Set the background colour to\n                                      ;; a nice shade of grey.\n(defn draw []\n  (q/stroke (q/random 255))             ;; Set the stroke colour to a random grey\n  (q/stroke-weight (q/random 10))       ;; Set the stroke thickness randomly\n  (q/fill (q/random 255))               ;; Set the fill colour to a random grey\n\n  (let [diam (q/random 100)             ;; Set the diameter to a value between 0 and 100\n        x    (q/random (q/width))       ;; Set the x coord randomly within the sketch\n        y    (q/random (q/height))]     ;; Set the y coord randomly within the sketch\n    (q/ellipse x y diam diam)))         ;; Draw a circle at x y with the correct diameter\n\n(q/defsketch app2                  ;; Define a new sketch named example\n  :title \"Oh so many grey circles\"    ;; Set the title of the sketch\n  :settings #(q/smooth 2)             ;; Turn on anti-aliasing\n  :setup setup                        ;; Specify the setup fn\n  :draw draw                          ;; Specify the draw fn\n  :size [323 200])                    ;; You struggle to beat the golden ratio"]}