{"version":3,"sources":["quil/middlewares/fun_mode.cljc"],"mappings":"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","names":["quil.middlewares.fun-mode/wrap-setup","options","setup","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/reset!","quil.core/state-atom","quil.middlewares.fun-mode/wrap-draw-update","draw","_","update","cljs.core/identity","quil-draw","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quil.core/frame-count","G__36487","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","quil.middlewares.fun-mode/mouse-event","quil.core/mouse-x","quil.core/mouse-y","quil.middlewares.fun-mode/mouse-event-full","quil.core/mouse-button","quil.middlewares.fun-mode/key-event","quil.core/key-as-keyword","quil.core/key-code","quil.core/raw-key","var_args","G__36490","quil.middlewares.fun-mode/wrap-handler","js/Error","handler-key","quil.middlewares.fun_mode.wrap_handler.cljs$core$IFn$_invoke$arity$3","event-fn","temp__5718__auto__","handler","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","quil.middlewares.fun-mode/wrap-handlers","seq36491","G__36492","cljs.core/first","cljs.core/next","self__4717__auto__","handlers","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/Keyword","quil.middlewares.fun_mode.wrap_handler.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","quil.middlewares.fun-mode/wrap-mouse-wheel","rotation","quil.middlewares.fun-mode/fun-mode","quil.middlewares.fun_mode.wrap_handlers.cljs$core$IFn$_invoke$arity$variadic","quil.core/pmouse-x","quil.core/pmouse-y"],"sourcesContent":["(ns quil.middlewares.fun-mode\n  (:require [quil.core :as q]))\n\n(defn- wrap-setup [options]\n  (let [setup (:setup options (fn [] nil))]\n    (assoc options\n           :setup #(reset! (q/state-atom) (setup)))))\n\n(defn- wrap-draw-update [options]\n  (let [draw (:draw options (fn [_]))\n        update (:update options identity)\n        quil-draw #(-> (q/state-atom)\n                       (swap! (if (= (q/frame-count) 1)\n                                identity\n                                update))\n                       (draw))]\n    (-> options\n        (dissoc :update)\n        (assoc :draw quil-draw))))\n\n(defn- mouse-event []\n  {:x (q/mouse-x)\n   :y (q/mouse-y)})\n\n(defn- mouse-event-full []\n  {:x (q/mouse-x)\n   :y (q/mouse-y)\n   :button (q/mouse-button)})\n\n(defn- key-event []\n  {:key (q/key-as-keyword)\n   :key-code (q/key-code)\n   :raw-key (q/raw-key)\n   #?@(:clj [:modifiers (q/key-modifiers)])})\n\n(defn- wrap-handler\n  ([options handler-key]\n   (wrap-handler options handler-key nil))\n  ([options handler-key event-fn]\n   (if-let [handler (options handler-key)]\n     (assoc options handler-key\n            (if event-fn\n              #(swap! (q/state-atom) handler (event-fn))\n              #(swap! (q/state-atom) handler)))\n     options)))\n\n(defn- wrap-handlers [options & handlers]\n  (reduce (fn [options handler]\n            (if (keyword? handler)\n              (wrap-handler options handler)\n              (apply wrap-handler options handler)))\n          options handlers))\n\n(defn- wrap-mouse-wheel [options]\n  (if-let [handler (:mouse-wheel options)]\n    (assoc options :mouse-wheel\n           (fn [rotation]\n             (swap! (q/state-atom) handler rotation)))\n    options))\n\n(defn fun-mode\n  \"Introduces function mode making all handlers (setup, draw, mouse-click, etc)\n  state-aware. Adds support for 'update' function.\"\n  [options]\n  (-> options\n      wrap-setup\n      wrap-draw-update\n      (wrap-handlers :focus-gained :focus-lost [:mouse-entered mouse-event]\n                     [:mouse-exited mouse-event] [:mouse-pressed mouse-event-full]\n                     [:mouse-released mouse-event] [:mouse-clicked mouse-event-full]\n                     [:mouse-moved (fn [] {:x (q/mouse-x) :y (q/mouse-y)\n                                           :p-x (q/pmouse-x) :p-y (q/pmouse-y)})]\n                     [:mouse-dragged (fn [] {:x (q/mouse-x) :y (q/mouse-y)\n                                             :p-x (q/pmouse-x) :p-y (q/pmouse-y)\n                                             :button (q/mouse-button)})]\n                     [:key-pressed key-event] [:key-released key-event] [:key-typed key-event]\n                     :on-close)\n      wrap-mouse-wheel))\n"]}