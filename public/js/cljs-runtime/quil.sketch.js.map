{"version":3,"sources":["quil/sketch.cljs"],"mappings":"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","names":["quil.sketch/*applet*","quil.sketch/current-applet","js/p5.prototype","quil.sketch/rendering-modes","quil.sketch/resolve-renderer","mode","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","quil.util/resolve-constant-key","quil.sketch/set-size","applet","width","height","temp__5720__auto__","el","inner-canvas","js/window","goog.style/getComputedStyle","var_args","G__35598","quil.sketch/size","js/Error","quil.sketch/bind-handlers","prc","opts","seq__35599","cljs.core/seq","chunk__35600","count__35601","i__35602","vec__35614","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__35619","cljs.core/first","cljs.core/next","processing-name","quil-name","handler","cljs.core/name","*applet*-orig-val__35617","*applet*-temp-val__35618","*applet*-orig-val__35622","*applet*-temp-val__35623","quil.sketch/in-fullscreen?","or__4131__auto__","js/document","quil.sketch/add-fullscreen-support","old-size","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","adjust-canvas-size","cljs.core/reset!","cljs.core/deref","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","G__35627","G__35628","G__35629","goog.events/listen","goog.events.EventType/KEYDOWN","event","cljs.core/not","canvas","js/console","G__35630","G__35631","G__35632","p1__35626#","quil.sketch/make-sketch","options","cljs.core/cons","quil.middlewares.deprecated-options/deprecated-options","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/comp","G__35635","fexpr__35634","p1__35633#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","sketch-size","renderer","features","cljs.core/set","setup","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","fexpr__35636","fexpr__35637","mouse-wheel","G__35639","fexpr__35638","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","sketch","quil.util/initial-internal-state","quil.sketch/destroy-previous-sketch","host-elem","proc-obj","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","quil.sketch/sketch","seq35640","self__4718__auto__","opts-map","cljs.core/hash-map","js/p5","quil.sketch/sketch-init-list","quil.sketch/empty-body?","child","quil.sketch/add-canvas","canvas-id","quil.sketch/init-sketches","add-elem?","seq__35641","chunk__35642","count__35643","i__35644","sk","fexpr__35647","fexpr__35648","quil.sketch/add-sketch-to-init-list","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","goog.events/listenOnce","goog.events.EventType/LOAD","cljs.core/List"],"sourcesContent":["(ns quil.sketch\n  (:require [quil.util :as u :include-macros true]\n            [quil.middlewares.deprecated-options :as do]\n            [goog.dom :as dom]\n            [goog.events :as events]\n            [goog.style :as style]\n            [goog.events.EventType :as EventType])\n  (:require-macros [quil.sketch]))\n\n(def ^:dynamic\n  *applet* nil)\n\n(defn current-applet [] *applet*)\n\n(u/generate-quil-constants :cljs\n                           rendering-modes (:java2d :p2d :p3d :opengl))\n\n(defn resolve-renderer [mode]\n  (if (= :p3d mode)\n    (aget js/p5.prototype \"WEBGL\")\n    (u/resolve-constant-key mode rendering-modes)))\n\n(defn set-size [applet width height]\n  (when-let [el (.-quil-canvas applet)]\n    ; p5js creates a <canvas> element inside provided <div> element\n    ; we need to resize only the canvas as outer div will adapt automatically\n    (let [inner-canvas (.querySelector el \"canvas\")]\n      (.setAttribute inner-canvas \"width\" width)\n      (.setAttribute inner-canvas \"height\" height)\n      (aset (.-style inner-canvas) \"width\" (str width \"px\"))\n      (aset (.-style inner-canvas) \"height\" (str height \"px\"))\n      (set! (.-width applet)\n            (.parseInt js/window (style/getComputedStyle inner-canvas \"width\")))\n      (set! (.-height applet)\n            (.parseInt js/window (style/getComputedStyle inner-canvas \"height\"))))))\n\n(defn size\n  ([width height]\n   (.createCanvas (current-applet) (int width) (int height)))\n\n  ([width height mode]\n   (.createCanvas (current-applet) (int width) (int height) (resolve-renderer mode))))\n\n(defn- bind-handlers [prc opts]\n  (doseq [[processing-name quil-name] {:setup :setup\n                                       :draw :draw\n\n                                       :keyPressed :key-pressed\n                                       :keyReleased :key-released\n                                       :keyTyped :key-typed\n\n                                       :mouseClicked :mouse-clicked\n                                       :mouseDragged :mouse-dragged\n                                       :mouseMoved :mouse-moved\n                                       :mousePressed :mouse-pressed\n                                       :mouseReleased :mouse-released\n                                       :mouseOut :mouse-exited\n                                       :mouseOver :mouse-entered\n                                       :mouseScrolled :mouse-wheel}]\n    (when-let [handler (opts quil-name)]\n      (aset prc (name processing-name)\n            (fn []\n              (quil.sketch/with-sketch prc\n                (handler)))))))\n\n(defn in-fullscreen? []\n  (or (.-fullscreenElement js/document)\n      (.-mozFullScreenElement js/document)))\n\n(defn add-fullscreen-support\n  \"Adds fullscreen support for provided Processing object.\n  Fullscreen is enabled when user presses F11. We turn\n  sketch <canvas> element to fullscreen storing old size\n  in an atom. When user cancels fullscreen (F11 or Esc)\n  we resize sketch to the old size.\"\n  [applet]\n  (let [old-size (atom nil)\n        adjust-canvas-size\n        (fn []\n          (if (in-fullscreen?)\n            (do\n              (reset! old-size\n                      [(.-width applet) (.-height applet)])\n              (set-size applet\n                        (-> js/window .-screen .-width)\n                        (-> js/window .-screen .-height)))\n            (apply set-size applet @old-size)))]\n    (events/listen js/window EventType/KEYDOWN\n                   (fn [event]\n                     (when (and (= (.-key event) \"F11\")\n                                (not (in-fullscreen?)))\n                       (.preventDefault event)\n                       (let [canvas (.-quil-canvas applet)]\n                         (cond (.-requestFullscreen canvas) (.requestFullscreen canvas)\n                               (.-mozRequestFullScreen canvas) (.mozRequestFullScreen canvas)\n                               :else (.warn js/console \"Fullscreen mode is not supported in current browser.\"))))))\n    (events/listen js/document \"fullscreenchange\" adjust-canvas-size)\n    (events/listen js/document \"mozfullscreenchange\" adjust-canvas-size)\n    (events/listen js/document \"fullscreenerror\"\n                   #(.error js/console \"Error while switching to/from fullscreen: \" %))))\n\n(defn make-sketch [options]\n  (let [opts            (->> (:middleware options [])\n                             (cons do/deprecated-options)\n                             (apply comp)\n                             (#(% options))\n                             (merge {:size [500 300]}))\n\n        sketch-size     (:size opts)\n        renderer        (:renderer opts)\n        features        (set (:features opts))\n\n        setup (fn []\n                (->> (if renderer [renderer] [])\n                     (concat sketch-size)\n                     (apply size))\n                (when (:settings opts) ((:settings opts)))\n                (when (:setup opts) ((:setup opts))))\n        mouse-wheel (when (:mouse-wheel opts)\n                      ;; -1 need for compability with Clojure version\n                      #((:mouse-wheel opts) (* -1 (.-mouseScroll *applet*))))\n\n        opts (assoc opts\n                    :setup setup\n                    :mouse-wheel mouse-wheel)\n\n        sketch (fn [prc]\n                 (bind-handlers prc opts)\n                 (set! (.-quil prc) (atom nil))\n                 (set! (.-quil-internal-state prc) (atom u/initial-internal-state)))]\n    sketch))\n\n(defn destroy-previous-sketch [host-elem]\n  (when-let [proc-obj (.-processing-obj host-elem)]\n    (.remove proc-obj)))\n\n(defn sketch [& opts]\n  (let [opts-map (apply hash-map opts)\n        host-elem (:host opts-map)\n        renderer (or (:renderer opts-map) :p2d)\n        host-elem (if (string? host-elem)\n                    (.getElementById js/document host-elem)\n                    host-elem)]\n    (if host-elem\n      (do\n        (if (.-processing-context host-elem)\n          (when-not (= renderer (.-processing-context host-elem))\n            (.warn js/console \"WARNING: Using different context on one canvas!\"))\n          (set! (.-processing-context host-elem) renderer))\n        (destroy-previous-sketch host-elem)\n        (let [proc-obj (js/p5. (make-sketch opts-map) host-elem)]\n          (set! (.-processing-obj host-elem) proc-obj)\n          (set! (.-quil-canvas proc-obj) host-elem)\n          (add-fullscreen-support proc-obj)\n          proc-obj))\n      (.error js/console\n              (if (:host opts-map)\n                (str \"ERROR: Cannot find host element: \" (:host opts-map))\n                \"ERROR: Cannot create sketch. :host is not specified or element not found.\")))))\n\n(def sketch-init-list (atom (list)))\n\n(defn empty-body? []\n  (let [child (.-childNodes (.-body js/document))]\n    ; seems hacky, we should come up with better way of\n    ; checking whether body is empty or not\n    (<= (.-length child) 1)))\n\n(defn add-canvas [canvas-id]\n  (let [canvas (.createElement js/document \"canvas\")]\n    (.setAttribute canvas \"id\" canvas-id)\n    (.appendChild (.-body js/document) canvas)))\n\n(defn init-sketches []\n  (let [add-elem? (empty-body?)]\n    (doseq [sk @sketch-init-list]\n      (when add-elem?\n        (add-canvas (:host-id sk)))\n      ((:fn sk))))\n  (reset! sketch-init-list []))\n\n(defn add-sketch-to-init-list [sk]\n  (swap! sketch-init-list conj sk)\n  ; if page already loaded immediately init sketch we just added\n  (when (= (.-readyState js/document) \"complete\")\n    (init-sketches)))\n\n(events/listenOnce js/window EventType/LOAD init-sketches)\n"]}